traning_ones=matrix(1 , length(training_set$X1),1)
X_traning_model = cbind(traning_ones,training_set$X2,training_set$X1^3,training_set$X3^4)
thetaHat(X_traning_model)
traning_ones=matrix(1 , length(training_set$X1),1)
X_traning_model = cbind(traning_ones,training_set$X2,training_set$X1^3,training_set$X3^4)
thetaHat(X_traning_model, training_set$y)
traning_ones=matrix(1 , length(training_set$X1),1)
X_traning_model = cbind(traning_ones,training_set$X2,training_set$X1^3,training_set$X3^4)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Y_testing_hat = training_set[c("X1","X2","X3", "X4")] %*% training_thetaHat
training_set
training_set[c("X1","X2","X3", "X4")]
training_thetaHat
training_set[c("X1","X2","X3", "X4")] %*% 2
training_set[c("X1","X2","X3", "X4")] *2
training_set[c("X1","X2","X3", "X4")] %*% training_thetaHat
as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
as.matrix(training_set[c("X1","X2","X3", "X4")])
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
calculateRSS(testing_set$y, Y_testing_hat)
t.test(training_set$y, mu = 500, alternative = "two.sided", conf.level=0.95)
C_I1 = -0.05082695
C_I2 = 0.44958790
p2 <- plot(density(training_set$y), col="blue", lwd=2,
main="Distribution of Traning Data")
abline(v=C_I1,col="red", lty=2)
abline(v=C_I2,col="red", lty=2)
ggplot(training_set$y, aes(x = values)) +
stat_density(aes(x=values, y =  after_stat(density), color=Inputs),geom="line") +
geom_rug()
ggplot(training_set, aes(x = values)) +
stat_density(aes(x=values, y =  after_stat(density), color=Inputs),geom="line") +
geom_rug()
ggplot(training_set, aes(x = y)) +
stat_density(aes(x=y, y =  after_stat(density), color=Inputs),geom="line") +
geom_rug()
gg_X1 = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
geom_histogram(aes(y = after_stat(density) ), bins=10,fill = "#195f90") +
stat_density(geom="line") +
geom_rug()
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
geom_histogram(aes(y = after_stat(density) ), bins=10,fill = "#195f90") +
stat_density(geom="line") +
geom_rug()
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_rug()
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line")
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_abline(C_I1)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_abline(intercept = C_I1, slope = -5)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_abline(intercept = C_I1)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_abline(intercept = C_I1, slope = -5)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_abline(intercept = C_I1, slope = 0)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_abline(intercept = C_I1, slope = 1)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_abline(intercept = C_I1, slope = -1)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_abline(intercept = C_I1, slope = -19)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_hline(intercept = C_I1, slope = -19)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_hline(intercept = C_I1)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1)+
geom_vline(xintercept = C_I2)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype=ID)+
geom_vline(xintercept = C_I2)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dotted")+
geom_vline(xintercept = C_I2)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed")+
geom_vline(xintercept = C_I2)
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")  %>% layout(plot_bgcolor='#e5ecf6', title=title, xaxis= list(title="Theoritical Quantities"), yaxis = list(title="Sample Quantities")))
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")  %>% layout(plot_bgcolor='#e5ecf6', title=title, xaxis= list(title="Theoritical Quantities"), yaxis = list(title="Sample Quantities"))
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")  %>% layout(plot_bgcolor='#e5ecf6', title=title, xaxis= list(title="Theoritical Quantities"), yaxis = list(title="Sample Quantities"))
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red") %>% layout(plot_bgcolor="black")
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red") + %>% layout(plot_bgcolor="black")
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red") %>% layout(plot_bgcolor="black")
ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of X2", xaxis= list(title="X2 Signal"), yaxis = list(title="Density"))
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of training data", xaxis= list(title="X2 Signal"), yaxis = list(title="Density"))
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of training data", xaxis= list(title="X2 Signal"), yaxis = list(title="y"))
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of training data", xaxis= list(title="y"), yaxis = list(title="Density"))
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line", color = "#195f90") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of training data", xaxis= list(title="y"), yaxis = list(title="Density"))
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line", color = "#195f90") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of training data", xaxis= list(title="y"), yaxis = list(title="Density"))
thetaHat(training_set[c["X1", "X2", "X3", "X4"]], training_set$y)
thetaHat(training_set[c("X1", "X2", "X3", "X4")], training_set$y)
thetaHat(as.matrix(training_set[c("X1", "X2", "X3", "X4")]), training_set$y)
traning_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X2,training_set$X1^3,training_set$X3^4, traning_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% as.matrix(training_thetaHat)
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% as.matraining_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% matraining_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% atraining_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
traning_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X2,training_set$X1^3,training_set$X3^4, traning_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
thetaHat(as.matrix(training_set[c("X1", "X2", "X3", "X4")]), training_set$y)
thetaHat(as.matrix(training_set[c("X1", "X2", "X3", "X4")]), training_set$y)
as.matrix(training_set[c("X1","X2","X3", "X4")])
thetaHat(as.matrix(training_set[c("X1", "X2", "X3", "X4")]), training_set$y)
thetaHat(as.matrix(training_set[c("X1", "X2", "X3", "X4")]), training_set$y)
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line", color = "#195f90") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of training data", xaxis= list(title="y"), yaxis = list(title="Density"))
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line", color = "#195f90") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of training data", xaxis= list(title="y"), yaxis = list(title="Density"))
t.test(training_set$y, mu = 500, alternative = "two.sided", conf.level=0.95)
calculateRSS(testing_set$y, Y_testing_hat)
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat = training_set[c("X1","X2","X3", "X4")] %*% training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
traning_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X2,training_set$X1^3,training_set$X3^4, traning_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
as.matrix(training_thetaHat)
traning_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X2,training_set$X1^3,training_set$X3^4, training_ones, traning_ones)
traning_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X2,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X2,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
as.matrix(training_thetaHat)
as.matrix(~training_thetaHat)
as.matrix([,training_thetaHat])
as.matrix(training_thetaHat[,])
as.matrix(training_thetaHat[,1])
as.matrix(training_thetaHat[,2])
as.matrix(training_thetaHat[,1])
training_thetaHat[,1]
training_thetaHat[1,]
training_thetaHat[,1]
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat[,1]
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")][,1]) %*% training_thetaHat[,1]
calculateRSS(testing_set$y, Y_testing_hat)
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
as.matrix(training_thetaHat[,1])
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X2,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
calculateRSS(testing_set$y, Y_testing_hat)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Split_Data = initial_split(df, prop = .8)
training_set = training(Split_Data)
testing_set = testing(Split_Data)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Split_Data = initial_split(df, prop = .8)
training_set = training(Split_Data)
testing_set = testing(Split_Data)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Split_Data = sample(df, prop = .8)
Split_Data = initial_split(df, prop = .8)
training_set = training(Split_Data)
testing_set = testing(Split_Data)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Split_Data = initial_split(df, prop = .8)
training_set = training(Split_Data)
testing_set = testing(Split_Data)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Split_Data = initial_split(df, prop = .8)
training_set = training(Split_Data)
testing_set = testing(Split_Data)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise[,1])
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise[1])
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
as.matrix(training_thetaHat[,1])
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
thetaHat(as.matrix(training_set[c("X1", "X2", "X3", "X4")]), training_set$y)
Model4_theta_hat = thetaHat(Model4, df$y)
print("Model4 Theta hat")
print(Model4_theta_hat[,1])
y_Hat_Model4 = Model4 %*% Model4_theta_hat
print("Model4 Y hat")
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat = as.matrix(training_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat = X_traning_model %*% training_thetaHat
Y_testing_hat = X_traning_model %*% training_thetaHat
Y_testing_hat
Y_testing_hat = as.matrix(testing_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat =testing_set[c("X1","X2","X3", "X4")] %*% training_thetaHat
Y_testing_hat = as.matrix(testing_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Y_testing_hat = as.matrix(testing_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat = as.matrix(testing_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
Y_testing_hat
calculateRSS(testing_set$y, Y_testing_hat)
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
X_traning_model[,5]
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
X_traning_model[,1:5]
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
training_noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, training_noise)
as.matrix(X_traning_model[,1:5])
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
as.matrix(X_traning_model[,1:5])
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
Y_testing_hat = as.matrix(testing_set[c("X1","X2","X3", "X4")]) %*% training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_thetaHat
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
Y_testing_hat = as.matrix(testing_set[c("X1","X2","X3", "X4")]) %*% as.matrix(training_thetaHat)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = c(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(X_traning_model)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(training_thetaHat)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(X_traning_model)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(X_traning_model)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(X_traning_model)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(X_traning_model)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(noise)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(X_traning_model)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(X_traning_model/5)
training_ones=matrix(1 , length(training_set$X1),1)
noise  = rnorm(length(training_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
as.matrix(training_thetaHat)
length(X_traning_model)/5
Y_testing_hat = as.matrix(testing_set[c("X1","X2","X3", "X4")]) %*% as.matrix(training_thetaHat)
