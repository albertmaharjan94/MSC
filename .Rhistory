testing_noise = rnorm(length(testing_set$y), mean=0, sd = 0.1)
X_traning_model = cbind(training_set$X4,training_set$X1^3,training_set$X3^4, training_ones, noise)
X_testing_model = cbind(testing_set$X4,testing_set$X1^3,testing_set$X3^4, testing_ones, testing_noise)
training_thetaHat = thetaHat(X_traning_model, training_set$y)
Y_testing_hat = X_testing_model %*% training_thetaHat
RSS_testing=sum((testing_set$y-Y_testing_hat)^2)
RSS_testing
t.test(training_set$y, mu = 500, alternative = "two.sided", conf.level=0.95)
C_I1 = -0.1631672
C_I2 = 0.4873683
traingin_plot = ggplot(training_set, aes(x = y)) +    # Draw histogram & density
stat_density(geom="line", color = "#195f90") +
geom_vline(xintercept = C_I1, linetype="dashed", color="red")+
geom_vline(xintercept = C_I2, linetype="dashed", color="red")
ggplotly(traingin_plot)  %>% layout(plot_bgcolor='#e5ecf6', title="Distribution of training data", xaxis= list(title="y"), yaxis = list(title="Density"))
thetaHatTraining = thetaHat(X_traning_model, training_set$y)
dis_test=density(training_set$y)
plot(dis_test,main = "Density plot of Y Signal")
z=1.96 ##(95%) Confidential interval
error=(as.matrix(testing_set$y)- Y_testing_hat)
n_len=length(Y_testing_hat)
sd_error = sqrt(abs(sum(error^2)/n_len -1))
sd_error
C_I_1= z * sqrt( abs((error * (1-error) ) / n_len))
C_I_1
C_I_2= z*sqrt(abs((error*(1+error)/n_len)))
C_I_2
Model2_theta_hat[4,]
Model2_theta_hat
arr_1=0
arr_2=0
f_value=0
s_value=0
Model2_theta_hat
#values from thetahat
thetebias <- Model2_theta_hat[4,] #choosen parameter
thetaone <- Model2_theta_hat[1,] # chosen prarameter
thetatwo <- Model2_theta_hat[2,] # constant value
thetathree <- -Model2_theta_hat[3,] # constant value
thetanoise <- Model2_theta_hat[5,]
Epison <- RSS_Model2 * 2 ## fixing value of eplision
num <- 100 #number of iteration
counter <- 0
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias) # calculating the range
range1
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetafour, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat ## New Y hat
new_RSS <- sum((df$y-New_Y_Hat)^2)
new_RSS
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter = counter+1
f_value <- matrix(arr_1)
s_value <- matrix(arr_2)
}
}
hist(f_value)
hist(f_value)
counter <- 0
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias) # calculating the range
range1
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat ## New Y hat
new_RSS <- sum((df$y-New_Y_Hat)^2)
new_RSS
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter = counter+1
f_value <- matrix(arr_1)
s_value <- matrix(arr_2)
}
}
plot(f_value,s_value, col = c("red", "blue"), main = "Joint and Marginal Posterior Distribution")
# Initialize the arrays to store the accepted samples
arr_1 <- rep(NA, num)
arr_2 <- rep(NA, num)
counter <- 0
# Implement the rejection ABC algorithm
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias)
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetafour, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat
new_RSS <- sum((df$y-New_Y_Hat)^2)
if (new_RSS < Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter <- counter + 1
}
}
# Initialize the arrays to store the accepted samples
arr_1 <- rep(NA, num)
arr_2 <- rep(NA, num)
counter <- 0
# Implement the rejection ABC algorithm
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias)
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat
new_RSS <- sum((df$y-New_Y_Hat)^2)
if (new_RSS < Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter <- counter + 1
}
}
# Estimate the posterior distribution from the accepted samples
f_value <- arr_1[!is.na(arr_1)]
s_value <- arr_2[!is.na(arr_2)]
mean_f <- mean(f_value)
mean_s <- mean(s_value)
sd_f <- sd(f_value)
sd_s <- sd(s_value)
f_value
counter <- 0
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias) # calculating the range
range1
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat ## New Y hat
new_RSS <- sum((df$y-New_Y_Hat)^2)
new_RSS
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter = counter+1
f_value <- matrix(arr_1)
s_value <- matrix(arr_2)
}
}
hist(f_value)
# Initialize the arrays to store the accepted samples
arr_1 <- rep(NA, num)
arr_2 <- rep(NA, num)
counter <- 0
# Implement the rejection ABC algorithm
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias)
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat
new_RSS <- sum((df$y-New_Y_Hat)^2)
if (new_RSS < Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter <- counter + 1
}
}
# Estimate the posterior distribution from the accepted samples
f_value <- arr_1[!is.na(arr_1)]
s_value <- arr_2[!is.na(arr_2)]
mean_f <- mean(f_value)
mean_s <- mean(s_value)
sd_f <- sd(f_value)
sd_s <- sd(s_value)
hist(f_value)
f_value[0]
s_value
mean_s
# Initialize the arrays to store the accepted samples
arr_1 <- 1
arr_2 <- 1
counter <- 0
# Implement the rejection ABC algorithm
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias)
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat
new_RSS <- sum((df$y-New_Y_Hat)^2)
if (new_RSS < Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter <- counter + 1
}
}
# Estimate the posterior distribution from the accepted samples
f_value <- arr_1[!is.na(arr_1)]
s_value <- arr_2[!is.na(arr_2)]
mean_f <- mean(f_value)
mean_s <- mean(s_value)
sd_f <- sd(f_value)
sd_s <- sd(s_value)
hist(f_value)
arr_1
counter <- 0
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias) # calculating the range
range1
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat ## New Y hat
new_RSS <- sum((df$y-New_Y_Hat)^2)
new_RSS
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter = counter+1
f_value <- matrix(arr_1)
s_value <- matrix(arr_2)
}
}
arr_1
arr_1[i] <- range1
# Initialize the arrays to store the accepted samples
arr_1 <- rep(NA, num)
arr_2 <- rep(NA, num)
counter <- 0
# Implement the rejection ABC algorithm
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias)
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat
new_RSS <- sum((df$y-New_Y_Hat)^2)
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter <- counter + 1
}
}
# Estimate the posterior distribution from the accepted samples
f_value <- arr_1[!is.na(arr_1)]
s_value <- arr_2[!is.na(arr_2)]
mean_f <- mean(f_value)
mean_s <- mean(s_value)
sd_f <- sd(f_value)
sd_s <- sd(s_value)
hist(f_value)
counter <- 0
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias) # calculating the range
range1
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat ## New Y hat
new_RSS <- sum((df$y-New_Y_Hat)^2)
new_RSS
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter = counter+1
f_value <- matrix(arr_1)
s_value <- matrix(arr_2)
}
}
hist(f_value)
# Initialize the arrays to store the accepted samples
arr_1 <- rep(NA, num)
arr_2 <- rep(NA, num)
counter <- 0
# Implement the rejection ABC algorithm
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias)
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat
new_RSS <- sum((df$y-New_Y_Hat)^2)
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter <- counter + 1
}
}
# Estimate the posterior distribution from the accepted samples
f_value <- arr_1[!is.na(arr_1)]
s_value <- arr_2[!is.na(arr_2)]
mean_f <- mean(f_value)
mean_s <- mean(s_value)
sd_f <- sd(f_value)
sd_s <- sd(s_value)
hist(f_value)
# Initialize the arrays to store the accepted samples
arr_1 <- rep(NA, num)
arr_2 <- rep(NA, num)
counter <- 0
# Implement the rejection ABC algorithm
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias)
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat
new_RSS <- sum((df$y-New_Y_Hat)^2)
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter <- counter + 1
}
}
# Estimate the posterior distribution from the accepted samples
f_value <- arr_1[!is.na(arr_1)]
s_value <- arr_2[!is.na(arr_2)]
mean_f <- mean(f_value)
mean_s <- mean(s_value)
sd_f <- sd(f_value)
sd_s <- sd(s_value)
hist(f_value)
# Initialize the arrays to store the accepted samples
arr_1 <- rep(NA, num)
arr_2 <- rep(NA, num)
counter <- 0
# Implement the rejection ABC algorithm
for (i in 1:num) {
range1 <- runif(1,-thetebias,thetebias)
range2 <- runif(1,-thetaone,thetaone)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree, thetanoise))
New_Y_Hat <- Model2 %*% New_thetahat
new_RSS <- sum((df$y-New_Y_Hat)^2)
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter <- counter + 1
}
}
# Estimate the posterior distribution from the accepted samples
f_value <- arr_1[!is.na(arr_1)]
s_value <- arr_2[!is.na(arr_2)]
mean_f <- mean(f_value)
mean_s <- mean(s_value)
sd_f <- sd(f_value)
sd_s <- sd(s_value)
hist(f_value)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
bias = runif(1, -1, 1)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
#bias = runif(1, -1, 1)
#Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
print("Model1 Theta hat")
print(Model1_theta_hat[,1])
print("Model1 Y hat")
y_Hat_Model1 = Model1 %*% Model1_theta_hat
print(y_Hat_Model1[1:5,])
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
bias = runif(1, -1, 1)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
bias = runif(1, -1, 1)
print(bias)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
bias = runif(1, -1, 1)
print(bias*ones)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
bias = runif(1, -1, 1)
print(Model1)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
print(bias)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
print(bias)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1)
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
print(bias)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
print(bias)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
Model1_theta_hat =thetaHat(Model1, df$y)
bias
ones
bias
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind( df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
Model1_theta_hat =thetaHat(Model1, df$y)
print("Model1 Theta hat")
print(Model1_theta_hat[,1])
print("Model1 Y hat")
y_Hat_Model1 = Model1 %*% Model1_theta_hat
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
Model1_theta_hat =thetaHat(Model1, df$y)
Model2 = cbind(df$X4, df$X1^3, df$X3^4, ones,bias,  noise)
Model2_theta_hat = thetaHat(Model2, df$y)
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
Model1_theta_hat =thetaHat(Model1, df$y)
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias)
Model1_theta_hat =thetaHat(Model1, df$y)
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
Model1_theta_hat =thetaHat(Model1, df$y)
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
Model1_theta_hat =thetaHat(Model1, df$y)
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4,  noise)
Model1 = cbind(Model1, theta_bias * ones)
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
Model1 = cbind(Model1, theta_bias * ones)
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
bias = runif(1, -1, 1) * ones
Model1 = cbind(ones, df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, bias, noise)
theta_bias = runif(1, -1, 1)
Model1 = cbind(Model1, theta_bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
solve(t(Model1) %*% Model1)
solve(Model1 %*% Model1)
thetaHat <- function(model, y){
return (solve(t(model) %*% model) %*% t(model) %*% y)
}
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
Model1 = cbind(df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, ones, noise)
bias = runif(1, -1, 1)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
ones = matrix(1, length(df$X1),1)
noise  = rnorm(length(df$y), mean=0, sd = 0.1)
Model1 = cbind(df$X4, df$X1^2, df$X1^3, df$X2^4, df$X1^4, ones, noise)
Model1 = cbind(Model1, bias * ones)
Model1_theta_hat =thetaHat(Model1, df$y)
